@page "/customers"
@using WoodgroveBank.Abstractions
@inject CustomerReceivedProxy _proxy
@implements IDisposable

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<p>Below are the recently-active customers.</p>

@if (_customers == null || !_customers.Any())
{
    <h3>No recent customer activity.</h3>
}
else
{
    <table class="table">
        <tbody>
            @foreach(var customer in _customers)
            {
                <tr>
                    <td>
                        <button class="btn btn-primary">Accounts</button>
                        <button class="btn btn-primary">Transactions</button>
                    </td>
                    <td>@customer.Name</td>
                    <td>@customer.City</td>
                    <td>@customer.Country</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Customer> _customers = new();

    protected override void OnInitialized()
    {
        _proxy.CustomerReceived += OnCustomerIndexUpdated;
    }

    protected void OnCustomerIndexUpdated(object sender, Customer customer)
    {
        if(_customers.Count > 30)
        {
            _customers = _customers.Take(29).ToList();
        }
        _customers.Insert(0, customer);

        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        _proxy.CustomerReceived -= OnCustomerIndexUpdated;
    }
}
